:PROPERTIES:
#+TITLE: Text Analysis Python
#+AUTHOR: J. Trips
#+DATE: <2025-01-14 mar>
#+LANGUAGE: en
#+EXPORT_FILE_NAME: Text_analysis
#+DESCRIPTION: Description
#+STARTUP: show2levels
#+OPTIONS: toc:2
# -*- org-src-preserve-indentation: t; -*- 
:END:
* Text Analysis 
:PROPERTIES:
:header-args: :tangle text_analysis.py :exports code
:END:

** Instructions

Goal: Write a Text analysis program that analyses a string of numbers

- ask the User for Text
- Count Symbols, Words and the number of occurences of each letter
- Return the results
  
** Get Input from User

This part should get a string of text from the user and verify that it is actually text and not untreatable.

#+begin_src python
  def check_text():
      intext = input("Get me some text to analyze: ").lower().strip()
      if intext.isascii():
          return intext
      else:
          raise ValueError
#+end_src

=String.isascii()= makes sure the inputed text is entierly contained in the ascii table, as this is what we will be checking against. If it is not Ascii, the function will raise a =ValueError= that we will use to except later.
=.lower()= converts everything to lower case

** Count the occurences of every symbol in the string and and keep track of them

the idea is to take the tect from the previous function and itterate through it, keeping track of each occurence. /Strings/ are just /List/'s in Python anyway so we can just loop through tham. 

#+begin_src python :tangle no
  def analyse_text(text):
    store = {}
    for letter in text:
      if letter in store:
        store[letter]+=1
      else:
        store[letter] = 1
    return store

#+end_src

We need to keep a couple of conditions in mind.

we need to present the text analysis
- spaces are words
- . ! ? are sentences, but words too, if they are the last character

#+begin_src python
  def analyse_text(text):
     words = 0
     letters  = 0
     symbols = 0
     sentences = 0
     sentence_ends = [".","!","?"]
     store = {}
     if text[0].isalnum():
         words += 1
     for element in text:
         if element in store:
             store[element]+=1
         else:
             store[element] = 1
         if element in sentence_ends:
             sentences +=1
         elif element == " ":
             words += 1
         if element.isalpha():
             letters += 1
         else:
             symbols += 1
     store["letters"] = letters
     store["symbols"] = symbols
     store["sentences"] = sentences

     return store
#+end_src

This function analyses the text input as discribed and returns a dictionary

** present Data
This function will take care of presenting the data to the user.
#+begin_src python
  def present(analysis :dict):
  grouped_analysis = ["words","sentences","letters","symbols"]
  for k in grouped_analysis:
    if k in analysis:
      if analysis[k] == 1:
        print(f" there is 1 {k[:-1]} in the provided text")
      else:
        print(f"there are {analysis[k]} {k} in the provided text")
      analysis.pop(k)
    else:
      print(f"there are no {k} in the provided text")
  analysis["<SPACE>"] = analysis.pop(" ")
  print(" ")
  print("the following distribution was encountered: ")
  for k,v in analysis.items():
    print(f"{k} was found {v} times"
#+end_src

we create a list of th elements that do not reprisent single symbols, so we can treat them all in the same way.

If a key with a name from the list is in the dictionary, we check the number of occurences and if it is 1, we slice of the s  through ={k[:-1]}= 

We also remove these from the dictionary with  =analysis.pop(k)=
=dict.pop()= actually retrieves the value so we can use it to rename a key. like this =analysis["<SPACE>"] = analysis.pop(" ")= 

Afterwards we itterate through all key, value pairs in the dictionary using the =dict.items()= method, and prit them out 1 by one.

** weave it together and call the program to execute

in this last section we are going to put all the pieces together and execute the code, The idea is an infinite loop, which we break out of once we have text to analyse.

If a value error occures, we skip the itteration

#+begin_src python
  def main():
    while True:
      try:
        text = check_text()
        break
    except ValueError:
      print("Non ASCII character detected, try again")
      continue
    present(analyse_text(text))

  main()
#+end_src

* Refactor
:PROPERTIES:
:header-args: :tangle text_analysis_refactor.py :exports code
:END:
** current code
Right now our code looks like this

#+begin_src python :tangle no
def check_text():
    intext = input("Get me some text to analyze: ").lower().strip()
    if intext.isascii():
        return intext
    else:
        raise ValueError

def analyse_text(text):
   words = 0
   letters  = 0
   symbols = 0
   sentences = 0
   sentence_ends = [".","!","?"]
   store = {}
   if text[0].isalnum():
       words += 1
   for element in text:
       if element in store:
           store[element]+=1
       else:
           store[element] = 1
       if element in sentence_ends:
           sentences +=1
       elif element == " ":
           words += 1
       if element.isalpha():
           letters += 1
       else:
           symbols += 1
   store["letters"] = letters
   store["symbols"] = symbols
   store["sentences"] = sentences

   return store

def present(analysis :dict):
  grouped_analysis = ["words","sentences","letters","symbols"]
  for k in grouped_analysis:
    if k in analysis:
      if analysis[k] == 1:
        print(f" there is 1 {k[:-1]} in the provided text")
      else:
        print(f"there are {analysis[k]} {k} in the provided text")
      analysis.pop(k)
    else:
      print(f"there are no {k} in the provided text")
  analysis["<SPACE>"] = analysis.pop(" ")    
  print(" ")
  print("the following distribution was encountered: ")
  for k,v in analysis.items():
    print(f"{k} was found {v} times")

def main():
  while True:
    try:
      text = check_text()
      break
    except ValueError:
        print("Non ASCII character detected, try again")
    continue
  present(analyse_text(text))

main()

#+end_src


Thats 63 lines of code and looks a bit convoluted for what we are trying to achieve

Through the process of refactoring we will try to create more readable, less complicated and more maintainable code

we will go through this process function by function
** imports
#+begin_src python
from collections import defaultdict
#+end_src
** check text
let us add type annotations to everything 
#+begin_src python
def check_text()-> str:
    intext = input("Get me some text to analyze: ")
    if intext.isascii():
        return intext.lower().strip()
    else:
        raise ValueError
#+end_src

Not much here, except moving the .lower() also strip the whitespace off beginning and end to the return value to shorten the line at the top

** analyze_text
First, the starting assignement can be one line since the counters all start at 0
Next we import the =defaultdict= from the =collections= library
its a dictionary that assignes a default datatype and value to elements
in our case that type will be int

Every ellement will than be initialized at 0 if not in the dictionary already. that way we get rid of the first if else.

We can also adress the contents of the dict directly since they get initialized at 0 anyways if the dont exsist. And since we now initialize all elements at 0by default, we dont need the assignement for letters numbers words sentences and symbols at all
#+begin_src python
  def analyse_text(text :str)-> dict:
     store = defaultdict(int)
     sentence_ends = [".","!","?"]
     if text[0].isalnum():
         store["words"] += 1
     for element in text:
         store[element]+=1
         if element in sentence_ends:
             store["sentences"] +=1
         elif element == " ":
             store["words"] += 1
         if element.isalpha():
             store["letters"] += 1
         else:
             store["symbols"] += 1
     return store
#+end_src

Here we can first fix a bug, when replacing " " we need to check if there are spaces in the distribution. We can do that by adding =if " " in analysis.keys():= before poping the " ".

#+begin_src python
  def present(analysis :dict) ->None:
    grouped_analysis = ["words","sentences","letters","symbols"]
    for k in grouped_analysis:
      if k in analysis:
        if analysis[k] == 1:
          print(f" there is 1 {k[:-1]} in the provided text")
        else:
          print(f"there are {analysis[k]} {k} in the provided text")
        analysis.pop(k)
      else:
        print(f"there are no {k} in the provided text")
        
    if " " in analysis.keys():
      analysis["<SPACE>"] = analysis.pop(" ")    
    print(" ")
    print("the following distribution was encountered: ")
    for k,v in analysis.items():
      print(f"{k} was found {v} times")

  def main():
    while True:
      try:
        text = check_text()
        break
      except ValueError:
          print("Non ASCII character detected, try again")
      continue
    present(analyse_text(text))

  main()
#+end_src
at this point we are down to 56 Lines of code and we got rid of some redundant code.
