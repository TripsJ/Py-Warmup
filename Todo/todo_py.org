#+TITLE: ToDo_Py
#+AUTHOR: J. Trips
#+DATE: <2025-01-23 jeu>
#+LANGUAGE: en
#+EXPORT_FILE_NAME: todo_py
#+DESCRIPTION: Exercise 3 of the python warmup
#+STARTUP: show2levels
#+OPTIONS: toc:2
# -*- org-src-preserve-indentation: t; -*-

* ToDo_Py
:PROPERTIES:
:header-args: :tangle todo.py :exports code
:END:
** Instructions
Target: Build a simple todolist program
- User cann add, remove and display Tasks
- Tasks are saved as a text file

** store tasks
we will store tasks in a list for the time being, lists are indexed and that will come in handy later

to do this we put ~tasklist = []~ atop our main function
** add Task
Adding a task is as simple as asking for input and appending to a list. Would be nice to check if its all whitespace or empty first
#+begin_src python
def is_not_blank(s:str)->bool:
    return bool(s and not s.isspace())
#+end_src
This will check if the string is empty or all whitespace and return true if not

#+begin_src python  
  def add_task(tasklist: list[str])-> list:
    task = input("what Do you want to add: ")
    if is_not_blank(task):
      tasklist.append(task)
      return tasklist
    else:
      return tasklist
#+end_src
** remove Task
now to remove a task, retyping it would be a bother so we will adress them with their index

#+begin_src python
  def remove_task(tasklist: list[str])-> list:
    if not tasklist:
      print ("No Tasks in list")
      return tasklist
    
    while True:
      userinput = input("which task do you want to remove (Index NÂ°)?: ")
      if userinput.isdigit():
        selected_task = int(userinput)
        break
      else:
        continue

    try:
       print(f"{tasklist.pop(selected_task)} has been removed")
    except IndexError:
       print("The specified task does not exsist")
    return tasklist

#+end_src
** display Tasks
#+begin_src python
  def display(tasklist:list[str])->None:
    if not tasklist:
      print ("YOUR ALL DONE")
    else:
      for count, task in enumerate(tasklist):
        print (f"{count}. {task}")
#+end_src

The ~enumerate()~ function takes an itterable and assignes it a value, you can use it to create counters in loops
** save Tasks
In the following block we will implement the save function by writing everythin to a file
it will take the same approache as the display function but use a context manager to write the lines to a file

#+begin_src python
  def save_to_file(tasklist :list[str])->bool:
    with open("tasks.txt","w") as file:
      for element, task in enumerate(tasklist):
        file.write(f"{element}. {task}\n")
      return True
#+end_src
** load Tasks
** Interactive menu
we need an interactive menu to display the Items and the users choices
a while loop will do the trick

#+begin_src python
  def menu(tasklist)->None:  
    while True:
      print("")
      print("Please choose your action")
      print("Press A to add a task")
      print("Press D to display the task list")
      print("Press R to remove a task")
      print("Press L to load a tasklist from a file")
      print("Press S to save the current task list")
      print ("Press Q to exit the program")
      print("")
      action = input("Please select your action: ").upper()

      match action:
        case "A":
          tasklist = add_task(tasklist)
        case "R":
          tasklist = remove_task(tasklist)
        case "S":
          print("saving...")
          if save_to_file(tasklist):
            print("Tasks saved to tasks.txt")
          else:
            print("saving failed")
        case "D":
          print("")
          print("-"*30)
          display(tasklist)
          print("-"*30)
        case "Q":
          print("Goodbye")
          break
        case _:
          print("invalid inuput")
#+end_src
** Main function and execution
Here we put everything together and run the program

#+begin_src python
  def main():
      tasklist = []
      print ("Welcome User")
      print("")
      print("-"*30)
      display(tasklist)
      print("-"*30)
      menu(tasklist)


  if __name__ == "__main__":
      main()
#+end_src

the ~if __ name  == "__ main __":~ checks if the code is intended to be ececuted and not just imported, so it doesent run when someone imports, say is_not_blank() for his own use.
