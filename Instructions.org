:PROPERTIES:
#+TITLE: Python Warmup
#+AUTHOR: J. Trips
#+DATE: <2025-01-08>
#+LANGUAGE: de
#+EXPORT_FILE_NAME: Readme
#+DESCRIPTION: Erkl√§rungen zum Python Warmup
#+STARTUP: show2levels
#+OPTIONS: toc:2
:END:


* Intro

Nach einiger Zeit weg von Python, m√∂chte ich nun Django lernen, habe aber das Gef√ºhl, das mir die Grundlagen etwas abhanden gekommen sind. Also hab ich gemacht was alle machen, ich hab Chat GPT gefragt.
Wonach,
Nach √ºbungen. Im folgenden die Antwort von ChatGPT:


* üöÄ Willkommen zur√ºck in der Welt von Python! üêç

Zwei Monate Pause sind kein Problem ‚Äì das Programmieren ist wie Fahrradfahren. Lass uns Schritt f√ºr Schritt dein Wissen auffrischen und dich wieder in Schwung bringen.

** üìö 1. Grundlagen-Auffrischung

Wir starten mit den wichtigsten Konzepten:

- Variablen und Datentypen
- Kontrollstrukturen (if-else, for, while)
- Funktionen
- Listen, Dictionaries, Tupel, Mengen
- Dateioperationen (lesen/schreiben)
- Fehlerbehandlung (try-except)


** üß† 2. √úbungen zur Auffrischung
*** √úbung 1: Zahlenraten-Spiel

Ziel: Programmiere ein kleines Zahlenraten-Spiel.

 - Das Programm w√§hlt eine zuf√§llige Zahl zwischen 1 und 100.
 - Der Nutzer muss raten.
 - Das Programm gibt Hinweise (zu hoch/zu niedrig).
 - Bonus: Z√§hle die Versuche und gib das Ergebnis aus.


*** √úbung 2: Textanalyse

Ziel: Analysiere eine Zeichenkette.

- Frage den Nutzer nach einem Text.
- Z√§hle W√∂rter, Zeichen und die H√§ufigkeit jedes Buchstabens.
- Gib das Ergebnis aus.


*** √úbung 3: To-Do-Liste

Ziel: Erstelle ein einfaches To-Do-Listen-Programm.

- Nutzer kann Aufgaben hinzuf√ºgen, entfernen und anzeigen lassen.
- Speichere die Liste in einer Textdatei.



* Mein Plan

Das klang f√ºr den Anfang ganz gut, also machen wir das so. Ich l√∂se die vorgeschlagenen aufgaben der Reihe nach und bediene mich an W3Shool Resourcen wenn ich was nicht wei√ü oder unsicher bin.
Verwenden werde ich daf√ºr Emacs und ich schreibe den code in Org-Dateien, die ich dann in Python Files umwandeln lasse. So gew√∂hne ich mich an Org und hab nachher eine Saubere Dokumentation.

Sowohl die Org Dateien als auch den reinen Quellcode lade ich hier Hoch. und mehr √ºbungen folgen wenn ich deke das ich noch was brauche.

* Emacs und Environment Setup
** Template Org File

Ich habe f√ºr den Anfang eine Org Datei erstellt mit einer reihe an Property Definitionen die als Template genutzt wird. Diese definitionen wurden gesetzt:

#+begin_src 
   :PROPERTIES:
   #+TITLE: Insert Title
   #+AUTHOR: J. Trips
   #+DATE: <2025-01-09 jeu>
   #+LANGUAGE: en
   #+EXPORT_FILE_NAME: target_file_name
   #+DESCRIPTION: Description
   #+STARTUP: show2levels
   #+OPTIONS: toc:2
   :END:

#+end_src

der Zweck dieser Datei ist nur das ich die Properties nicht vergesse, Die Inhalte werden dann ge√§ndert oder entfernt wie n√∂tig.
Zus√§tzlich lassen sich noch standard Argumente f√ºr code bl√∂cke setzen, wie zum Beispiel:
#+begin_src
  #+PROPERTY: header-args: python -n


#+end_src

was alle Code Bl√∂cke auf Python code einstellt und durchnummeriert.

** Git
Dieses Git repo wurde mit von Github erstellt und dann per *SSH* auf gecloned, da Gitub den support f√ºr https Authentifizierung eingestellt hat.

Ich habe des weiteren eine .gitignore Datei erstellt mit dem folgenden Inhalt
Diese habe ich mir ergoogelt

#+begin_src .gitignore
# -*- mode: gitignore; -*-
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Org-mode
.org-id-locations
*_archive

# flymake-mode
*_flymake.*

# eshell files
/eshell/history
/eshell/lastdir

# elpa packages
/elpa/

# reftex files
*.rel

# AUCTeX auto folder
/auto/

# cask packages
.cask/
dist/

# Flycheck
flycheck_*.el

# server auth directory
/server/

# projectiles files
.projectile

# directory configuration
.dir-locals.el

# network security
/network-security.data
#+end_src

das sorgt daf√ºr das die von Emacs erstellten Backups von git Ignioriert werden, auch diese Datei wird wie ben√∂tigt erweitert, Sowie eventuelle elpa packages oder Latex inhalte

90 % davon nutze ich aktuell noch nicht aber es klingt sinnig


